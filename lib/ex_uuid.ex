defmodule ExUUID do
  @moduledoc """
  Documentation for `ExUUID`.
  """

  @node_id {:ex_uuid, :node_id}
  @ets_name :ex_uuid

  @doc """
  get UUIDv1.

  ## Examples

      iex> ExUUID.get_uuid
      "3640619c-3055-11eb-ac47-fbe00430cc44"

  """
  def get_uuid do
    node = uuid1_node()
    clockseq = uuid1_clockseq()
    UUID.uuid1(clockseq, node)
  end

  # Generate random clock sequence.
  defp uuid1_clockseq() do
    <<rnd::14, _::2>> = :crypto.strong_rand_bytes(2)
    <<rnd::14>>
  end

  # Get UUIDv1 node identifier
  defp uuid1_node() do
    :persistent_term.get(@node_id)
  end

  @doc """
  get node name by UUIDv1.

  ## Examples

      iex> ExUUID.get_node("3640619c-3055-11eb-ac47-fbe00430cc44")
      :nonode@nohost

  """
  def get_node!(uuid) do
    <<_::96, node_hash::32>> = UUID.string_to_binary!(uuid)
    :ets.lookup_element(@ets_name, node_hash, 2)
  end

  @doc """
  check if this UUIDv1 is generated by this node.
  returns false if it that was another node with the
  same name, e.g. if node crashed and restarted

  ## Examples

      iex> ExUUID.this_node?("d4d72e18-3059-11eb-8a94-070d0430cc44")
      true
      iex> ExUUID.this_node?("3640619c-3055-11eb-ac47-fbe00430cc44")
      false

  """
  def this_node?(uuid) do
    <<_::80, full_node_hash::binary-size(6)>> = UUID.string_to_binary!(uuid)
    uuid1_node() == full_node_hash
  end
end
